apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.crowdmap'
description =""" Crowdmap API's Java SDK """
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceSets {
    examples {
        compileClasspath = sourceSets.main.output + sourceSets.main.runtimeClasspath
    }
}

dependencies {
    compile 'com.squareup.okhttp:okhttp:1.3.0'
    compile 'com.squareup.retrofit:retrofit:1.4.1'
    testCompile 'com.squareup.retrofit:retrofit-mock:1.4.1'
    testCompile 'junit:junit-dep:4.+'
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(getAuth())
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(getAuth())
            }
            pom {
                project {
                    name        'Crowdmap Java SDK'
                    description 'A Java SDK for accessing Crowdmap API. This works on Android as well'
                    packaging 'jar'
                    url 'https://github.com/ushahidi/Crowdmap-Java#readme'
                    inceptionYear '2013'
                    scm {
                        url 'https://github.com/ushahidi/Crowdmap-Java'
                        connection 'scm:git:git://github.com/ushahidi/Crowdmap-Java.git'
                        developerConnection 'scm:git:git@github.com:ushahidi/Crowdmap-Java.git'
                    }
                    licenses {
                        license {
                            name         'GNU AFFERO GENERAL PUBLIC LICENSE'
                            url          'https://github.com/ushahidi/Crowdmap-Java/blob/master/LICENSE'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'eyedol'
                            name 'Henry Addo'
                            email 'henry@ushahidi.com'
                        }
                    }
                }
            }
        }
    }
}

[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

task doc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "Crowdmap Java SDK API Doc $version"
    classpath = sourceSets.main.compileClasspath
    destinationDir = new File(new File(buildDir, 'javadoc'), version)
    options.version = true
    options.links = [
            "https://api.crowdmap.com/developers/v1",
            "http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html"
    ]
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Crowdmap API Java SDK', 'Implementation-Version': version
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc/'+version
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'

}

signing {
    sign configurations.archives
}

task jarAll(type: Jar) {
    description = "Build a jar file with all dependencies"
    dependsOn configurations.runtime, sourceSets.main.output, sourceSets.examples.output
    archiveName = project.name + "-" + version +"-all.jar"
    from { (configurations.runtime + sourceSets.main.output + sourceSets.examples.output ).collect {
        it.isDirectory() ? it : zipTree(it) }
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

def getAuth() {
    if (project.hasProperty('sonatypeUsername') &&
            project.hasProperty('sonatypePassword')) {
        return [userName: sonatypeUsername, password: sonatypePassword]
    }
    [:]
}

def example(name, mainClass, arguments) {
    task(name, dependsOn: ['compileJava', 'compileExamplesJava']) << {
        javaexec {
            main = 'com.crowdmap.java.sdk.examples.'+mainClass
            classpath = sourceSets.main.runtimeClasspath + sourceSets.examples.output
            args arguments.call()
        }
    }
}

example('postServiceExample', 'PostServiceExample', {[pubKey, privKey, crowdmapUsername, crowdmapPassword]})
example('utilityServiceExample', 'UtilityServiceExample', {[pubKey, privKey]})